/*
 * Arena.cpp
 *
 *  Created on: Sep 23, 2015
 *      Author: aguel
 */
#include "Arena.h"
#include "Robot.h"
#include "Cleric.h"
#include "Archer.h"
#include <fstream>
#include <sstream>
#include <iostream>
#include <string>

		Arena::Arena(){}
		Arena::~Arena(){}


		/*
		 *	Adds a new fighter to the collection of fighters in the arena. Do not allow
		 *	duplicate names.  Reject any string that does not adhere to the format
		 *	outlined in the lab specs.
		 *
		 *	Return true if a new fighter was added; false otherwise.
		 */
		bool Arena::addFighter(string info){
			string title;
			string type;
			int hitPoints;
			int strength;
			int speed;
			int magic;

			while (getline(cin,info)){
				stringstream ss;
				ss.clear();
				ss.str("");
				ss << info;
				ss >> title >> type >> hitPoints >> strength >> speed >> magic;

				 if(type != "A" || type!= "R" || type != "c"){
					 return false;
				 }
				 if (ss.fail()){
					 return false;
				 }
				 if(ss.eof()){
					 return false;
				 }

				if(type == "A"){

				arenaFighters.push_back(new Archer(title, hitPoints, hitPoints, strength, speed, speed, magic));
				return true;
				}
				else if(type=="R"){

					double energy = magic * 2;
					int bonus_damage = 0;
					arenaFighters.push_back(new Robot(bonus_damage, energy, energy, title, hitPoints, hitPoints, strength, speed, speed, magic));
					return true;

				}else if(type=="C"){
					int mana = magic*5;
					arenaFighters.push_back(new Cleric(mana, title, hitPoints, hitPoints, strength, speed, speed, magic));
					return true;
				}

			}
		}

		/*
		 *	removeFighter(string)
		 *
		 *	Removes the fighter whose name is equal to the given name.  Does nothing if
		 *	no fighter is found with the given name.
		 *
		 *	Return true if a fighter is removed; false otherwise.
		 */
		bool Arena::removeFighter(string name){
			for (int i = 0; i <arenaFighters.size(); i++){
				if(name == arenaFighters[i]->getName()){
					arenaFighters.erase(arenaFighters.begin()+(i-1));
					return true;
				}
			}
			return false;
		}

		/*
		 *	getFighter(string)
		 *
		 *	Returns the memory address of a fighter whose name is equal to the given
		 *	name.  Returns NULL if no fighter is found with the given name.
		 *
		 *	Return a memory address if a fighter is found; NULL otherwise.
		 */

		FighterInterface* Arena::getFighter(string name){
			for (int i = 0; i <arenaFighters.size(); i++){
				if(name == arenaFighters[i]->getName()){
					return arenaFighters[i];
				}
			}
			return NULL;
		}

		/*
		 *	getSize()
		 *
		 *	Returns the number of fighters in the arena.
		 *
		 *	Return a non-negative integer.
		 */
		int Arena::getSize(){
			return arenaFighters.size();
		}





